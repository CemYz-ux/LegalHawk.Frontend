//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from 'axios';

export module LegalHawkBackendClientModule {
  export class LegalHawkBackendClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
      undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
      this.instance = instance || axios.create();

      this.baseUrl = baseUrl ?? '';
    }

    /**
     * @param filters (optional)
     * @param sorts (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OkListResponse
     */
    getLegalContracts(
      filters: string | undefined,
      sorts: string | undefined,
      page: number | undefined,
      pageSize: number | undefined,
      cancelToken?: CancelToken
    ): Promise<LegalContractListDtoOkListResponse> {
      let url_ = this.baseUrl + '/api/v1/legal-contracts?';
      if (filters === null)
        throw new Error("The parameter 'filters' cannot be null.");
      else if (filters !== undefined)
        url_ += 'Filters=' + encodeURIComponent('' + filters) + '&';
      if (sorts === null)
        throw new Error("The parameter 'sorts' cannot be null.");
      else if (sorts !== undefined)
        url_ += 'Sorts=' + encodeURIComponent('' + sorts) + '&';
      if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
      else if (page !== undefined)
        url_ += 'Page=' + encodeURIComponent('' + page) + '&';
      if (pageSize === null)
        throw new Error("The parameter 'pageSize' cannot be null.");
      else if (pageSize !== undefined)
        url_ += 'PageSize=' + encodeURIComponent('' + pageSize) + '&';
      url_ = url_.replace(/[?&]$/, '');

      let options_: AxiosRequestConfig = {
        method: 'GET',
        url: url_,
        headers: {
          Accept: 'application/json',
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processGetLegalContracts(_response);
        });
    }

    protected processGetLegalContracts(
      response: AxiosResponse
    ): Promise<LegalContractListDtoOkListResponse> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === 'object') {
        for (const k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = LegalContractListDtoOkListResponse.fromJS(resultData200);
        return Promise.resolve<LegalContractListDtoOkListResponse>(result200);
      } else if (status === 404) {
        const _responseText = response.data;
        return throwException('NotFound', status, _responseText, _headers);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      }
      return Promise.resolve<LegalContractListDtoOkListResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return CreatedResponse
     */
    createLegalConract(
      body: LegalContractCreateOptions | undefined,
      cancelToken?: CancelToken
    ): Promise<LegalContractDetailDtoOkListResponse> {
      let url_ = this.baseUrl + '/api/v1/legal-contracts';
      url_ = url_.replace(/[?&]$/, '');

      const content_ = JSON.stringify(body);

      let options_: AxiosRequestConfig = {
        data: content_,
        method: 'POST',
        url: url_,
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processCreateLegalConract(_response);
        });
    }

    protected processCreateLegalConract(
      response: AxiosResponse
    ): Promise<LegalContractDetailDtoOkListResponse> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === 'object') {
        for (const k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201 = _responseText;
        result201 = LegalContractDetailDtoOkListResponse.fromJS(resultData201);
        return Promise.resolve<LegalContractDetailDtoOkListResponse>(result201);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      }
      return Promise.resolve<LegalContractDetailDtoOkListResponse>(null as any);
    }

    /**
     * @return OkListResponse
     */
    getLegalContractById(
      id: string,
      cancelToken?: CancelToken
    ): Promise<LegalContractDetailDtoOkListResponse> {
      let url_ = this.baseUrl + '/api/v1/legal-contracts/{id}';
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace('{id}', encodeURIComponent('' + id));
      url_ = url_.replace(/[?&]$/, '');

      let options_: AxiosRequestConfig = {
        method: 'GET',
        url: url_,
        headers: {
          Accept: 'application/json',
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processGetLegalContractById(_response);
        });
    }

    protected processGetLegalContractById(
      response: AxiosResponse
    ): Promise<LegalContractDetailDtoOkListResponse> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === 'object') {
        for (const k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = LegalContractDetailDtoOkListResponse.fromJS(resultData200);
        return Promise.resolve<LegalContractDetailDtoOkListResponse>(result200);
      } else if (status === 404) {
        const _responseText = response.data;
        return throwException('NotFound', status, _responseText, _headers);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      }
      return Promise.resolve<LegalContractDetailDtoOkListResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return UpdatedResponse
     */
    updateLegalConract(
      id: string,
      body: LegalContractUpdateOptions | undefined,
      cancelToken?: CancelToken
    ): Promise<LegalContractDetailDtoOkListResponse> {
      let url_ = this.baseUrl + '/api/v1/legal-contracts/{id}';
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace('{id}', encodeURIComponent('' + id));
      url_ = url_.replace(/[?&]$/, '');

      const content_ = JSON.stringify(body);

      let options_: AxiosRequestConfig = {
        data: content_,
        method: 'PATCH',
        url: url_,
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processUpdateLegalConract(_response);
        });
    }

    protected processUpdateLegalConract(
      response: AxiosResponse
    ): Promise<LegalContractDetailDtoOkListResponse> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === 'object') {
        for (const k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 201) {
        const _responseText = response.data;
        let result201: any = null;
        let resultData201 = _responseText;
        result201 = LegalContractDetailDtoOkListResponse.fromJS(resultData201);
        return Promise.resolve<LegalContractDetailDtoOkListResponse>(result201);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      }
      return Promise.resolve<LegalContractDetailDtoOkListResponse>(null as any);
    }

    deleteLegalContractById(
      id: string,
      cancelToken?: CancelToken
    ): Promise<void> {
      let url_ = this.baseUrl + '/api/v1/legal-contracts/{id}';
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace('{id}', encodeURIComponent('' + id));
      url_ = url_.replace(/[?&]$/, '');

      let options_: AxiosRequestConfig = {
        method: 'DELETE',
        url: url_,
        headers: {},
        cancelToken,
      };

      return this.instance
        .request(options_)
        .catch((_error: any) => {
          if (isAxiosError(_error) && _error.response) {
            return _error.response;
          } else {
            throw _error;
          }
        })
        .then((_response: AxiosResponse) => {
          return this.processDeleteLegalContractById(_response);
        });
    }

    protected processDeleteLegalContractById(
      response: AxiosResponse
    ): Promise<void> {
      const status = response.status;
      let _headers: any = {};
      if (response.headers && typeof response.headers === 'object') {
        for (const k in response.headers) {
          if (response.headers.hasOwnProperty(k)) {
            _headers[k] = response.headers[k];
          }
        }
      }
      if (status === 404) {
        const _responseText = response.data;
        return throwException('NotFound', status, _responseText, _headers);
      } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException(
          'An unexpected server error occurred.',
          status,
          _responseText,
          _headers
        );
      }
      return Promise.resolve<void>(null as any);
    }
  }

  export class LegalContractCreateOptions
    implements ILegalContractCreateOptions
  {
    /** The name of the author of the contract */
    author!: string;
    /** The title of the contract */
    title!: string;
    /** A short description of the legal contract */
    description?: string | undefined;

    constructor(data?: ILegalContractCreateOptions) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.author = _data['author'];
        this.title = _data['title'];
        this.description = _data['description'];
      }
    }

    static fromJS(data: any): LegalContractCreateOptions {
      data = typeof data === 'object' ? data : {};
      let result = new LegalContractCreateOptions();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data['author'] = this.author;
      data['title'] = this.title;
      data['description'] = this.description;
      return data;
    }
  }

  export interface ILegalContractCreateOptions {
    /** The name of the author of the contract */
    author: string;
    /** The title of the contract */
    title: string;
    /** A short description of the legal contract */
    description?: string | undefined;
  }

  export class LegalContractDetailDto implements ILegalContractDetailDto {
    id?: string;
    title!: string | undefined;
    author!: string | undefined;
    description?: string | undefined;
    createdAt?: Date;
    modifiedAt?: Date;

    constructor(data?: ILegalContractDetailDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data['id'];
        this.title = _data['title'];
        this.author = _data['author'];
        this.description = _data['description'];
        this.createdAt = _data['createdAt']
          ? new Date(_data['createdAt'].toString())
          : <any>undefined;
        this.modifiedAt = _data['modifiedAt']
          ? new Date(_data['modifiedAt'].toString())
          : <any>undefined;
      }
    }

    static fromJS(data: any): LegalContractDetailDto {
      data = typeof data === 'object' ? data : {};
      let result = new LegalContractDetailDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data['id'] = this.id;
      data['title'] = this.title;
      data['author'] = this.author;
      data['description'] = this.description;
      data['createdAt'] = this.createdAt
        ? this.createdAt.toISOString()
        : <any>undefined;
      data['modifiedAt'] = this.modifiedAt
        ? this.modifiedAt.toISOString()
        : <any>undefined;
      return data;
    }
  }

  export interface ILegalContractDetailDto {
    id?: string;
    title: string | undefined;
    author: string | undefined;
    description?: string | undefined;
    createdAt?: Date;
    modifiedAt?: Date;
  }

  export class LegalContractDetailDtoOkListResponse
    implements ILegalContractDetailDtoOkListResponse
  {
    /** The HTTP response status codes */
    code?: number | undefined;
    data?: LegalContractDetailDto[] | undefined;
    /** A text describing the response */
    description?: string | undefined;
    /** A response message delivered with the response */
    message?: string | undefined;
    count?: number;
    totalCount?: number;

    constructor(data?: ILegalContractDetailDtoOkListResponse) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.code = _data['code'];
        if (Array.isArray(_data['data'])) {
          this.data = [] as any;
          for (let item of _data['data'])
            this.data!.push(LegalContractDetailDto.fromJS(item));
        }
        this.description = _data['description'];
        this.message = _data['message'];
        this.count = _data['count'];
        this.totalCount = _data['totalCount'];
      }
    }

    static fromJS(data: any): LegalContractDetailDtoOkListResponse {
      data = typeof data === 'object' ? data : {};
      let result = new LegalContractDetailDtoOkListResponse();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data['code'] = this.code;
      if (Array.isArray(this.data)) {
        data['data'] = [];
        for (let item of this.data) data['data'].push(item.toJSON());
      }
      data['description'] = this.description;
      data['message'] = this.message;
      data['count'] = this.count;
      data['totalCount'] = this.totalCount;
      return data;
    }
  }

  export interface ILegalContractDetailDtoOkListResponse {
    /** The HTTP response status codes */
    code?: number | undefined;
    data?: LegalContractDetailDto[] | undefined;
    /** A text describing the response */
    description?: string | undefined;
    /** A response message delivered with the response */
    message?: string | undefined;
    count?: number;
    totalCount?: number;
  }

  export class LegalContractListDto implements ILegalContractListDto {
    id?: string;
    title!: string | undefined;
    author!: string | undefined;
    description?: string | undefined;
    createdAt?: Date;
    modifiedAt?: Date;

    constructor(data?: ILegalContractListDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data['id'];
        this.title = _data['title'];
        this.author = _data['author'];
        this.description = _data['description'];
        this.createdAt = _data['createdAt']
          ? new Date(_data['createdAt'].toString())
          : <any>undefined;
        this.modifiedAt = _data['modifiedAt']
          ? new Date(_data['modifiedAt'].toString())
          : <any>undefined;
      }
    }

    static fromJS(data: any): LegalContractListDto {
      data = typeof data === 'object' ? data : {};
      let result = new LegalContractListDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data['id'] = this.id;
      data['title'] = this.title;
      data['author'] = this.author;
      data['description'] = this.description;
      data['createdAt'] = this.createdAt
        ? this.createdAt.toISOString()
        : <any>undefined;
      data['modifiedAt'] = this.modifiedAt
        ? this.modifiedAt.toISOString()
        : <any>undefined;
      return data;
    }
  }

  export interface ILegalContractListDto {
    id?: string;
    title: string | undefined;
    author: string | undefined;
    description?: string | undefined;
    createdAt?: Date;
    modifiedAt?: Date;
  }

  export class LegalContractListDtoOkListResponse
    implements ILegalContractListDtoOkListResponse
  {
    /** The HTTP response status codes */
    code?: number | undefined;
    data?: LegalContractListDto[] | undefined;
    /** A text describing the response */
    description?: string | undefined;
    /** A response message delivered with the response */
    message?: string | undefined;
    count?: number;
    totalCount?: number;

    constructor(data?: ILegalContractListDtoOkListResponse) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.code = _data['code'];
        if (Array.isArray(_data['data'])) {
          this.data = [] as any;
          for (let item of _data['data'])
            this.data!.push(LegalContractListDto.fromJS(item));
        }
        this.description = _data['description'];
        this.message = _data['message'];
        this.count = _data['count'];
        this.totalCount = _data['totalCount'];
      }
    }

    static fromJS(data: any): LegalContractListDtoOkListResponse {
      data = typeof data === 'object' ? data : {};
      let result = new LegalContractListDtoOkListResponse();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data['code'] = this.code;
      if (Array.isArray(this.data)) {
        data['data'] = [];
        for (let item of this.data) data['data'].push(item.toJSON());
      }
      data['description'] = this.description;
      data['message'] = this.message;
      data['count'] = this.count;
      data['totalCount'] = this.totalCount;
      return data;
    }
  }

  export interface ILegalContractListDtoOkListResponse {
    /** The HTTP response status codes */
    code?: number | undefined;
    data?: LegalContractListDto[] | undefined;
    /** A text describing the response */
    description?: string | undefined;
    /** A response message delivered with the response */
    message?: string | undefined;
    count?: number;
    totalCount?: number;
  }

  export class LegalContractUpdateOptions
    implements ILegalContractUpdateOptions
  {
    /** The name of the author of the contract */
    author!: string;
    /** The title of the contract */
    title!: string;
    /** A short description of the legal contract */
    description?: string | undefined;

    constructor(data?: ILegalContractUpdateOptions) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.author = _data['author'];
        this.title = _data['title'];
        this.description = _data['description'];
      }
    }

    static fromJS(data: any): LegalContractUpdateOptions {
      data = typeof data === 'object' ? data : {};
      let result = new LegalContractUpdateOptions();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data['author'] = this.author;
      data['title'] = this.title;
      data['description'] = this.description;
      return data;
    }
  }

  export interface ILegalContractUpdateOptions {
    /** The name of the author of the contract */
    author: string;
    /** The title of the contract */
    title: string;
    /** A short description of the legal contract */
    description?: string | undefined;
  }

  export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any };
    result: any;

    constructor(
      message: string,
      status: number,
      response: string,
      headers: { [key: string]: any },
      result: any
    ) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
      return obj.isSwaggerException === true;
    }
  }

  function throwException(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result?: any
  ): any {
    if (result !== null && result !== undefined) throw result;
    else throw new SwaggerException(message, status, response, headers, null);
  }

  function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
  }
}
